// inspired by https://github.com/nolimits4web/Framework7/blob/v2/src/less/mixins.less#L76
// but more powerful, both support viewport scale and not scale usage.

@import '../var';

// prettier-ignore
$real1Px: 1PX;

@mixin scale-hairline-common($color, $top, $right, $bottom, $left) {
  content: '';
  position: absolute;
  background-color: $color;
  z-index: 1;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin hairline($direction, $color: $border-color-base, $radius: 0) {
  @if $direction == 'top' {
    border-top: $real1Px solid $color;

    html:not([data-scale]) & {
      @media (min-resolution: 2dppx) {
        border-top: none;

        &::before {
          @include scale-hairline-common($color, 0, auto, auto, 0);
          width: 100%;
          height: $real1Px;
          transform-origin: 50% 50%;
          transform: scaleY(0.5);

          @media (min-resolution: 3dppx) {
            transform: scaleY(0.33);
          }
        }
      }
    }
  } @else if $direction == 'right' {
    border-right: $real1Px solid $color;

    html:not([data-scale]) & {
      @media (min-resolution: 2dppx) {
        border-right: none;

        &::after {
          @include scale-hairline-common($color, 0, 0, auto, auto);

          width: $real1Px;
          height: 100%;
          background: $color;
          transform-origin: 100% 50%;
          transform: scaleX(0.5);

          @media (min-resolution: 3dppx) {
            transform: scaleX(0.33);
          }
        }
      }
    }
  } @else if $direction == 'bottom' {
    border-top: $real1Px solid $color;

    html:not([data-scale]) & {
      @media (min-resolution: 2dppx) {
        border-top: none;

        &::after {
          @include scale-hairline-common($color, auto, auto, 0, 0);
          width: 100%;

          height: $real1Px;
          transform-origin: 100% 0%;
          transform: scaleY(0.5);

          @media (min-resolution: 3dppx) {
            transform: scaleY(0.33);
          }
        }
      }
    }
  } @else if $direction == 'left' {
    border-left: $real1Px solid $color;

    html:not([data-scale]) & {
      @media (min-resolution: 2dppx) {
        border-left: none;

        &::before {
          @include scale-hairline-common($color, 0, auto, auto, 0);

          width: $real1Px;
          height: 100%;
          transform-origin: 100% 50%;
          transform: scaleX(0.5);

          @media (min-resolution: 3dppx) {
            transform: scaleX(0.33);
          }
        }
      }
    }
  } @else if $direction == 'all' {
    border: $real1Px solid $color;
    border-radius: $radius;

    html:not([data-scale]) & {
      @media (min-resolution: 2dppx) {
        position: relative;
        border: none;

        &::before {
          content: '';
          position: absolute;
          left: 0;
          top: 0;
          width: 200%;
          height: 200%;

          border: $real1Px solid $color;
          border-radius: $radius * 2;
          transform-origin: 0 0;
          transform: scale(0.5);
          box-sizing: border-box;
          pointer-events: none;
        }
      }
    }
  }
}

@mixin hairline-remove($position) {
  @if $position == 'top' {
    border-top: 0;
    &:before {
      display: none !important;
    }
  } @else if $position == 'right' {
    border-right: 0;
    &:after {
      display: none !important;
    }
  } @else if $position == 'bottom' {
    border-bottom: 0;
    &:after {
      display: none !important;
    }
  } @else if $position == 'left' {
    border-left: 0;
    &:before {
      display: none !important;
    }
  } @else if $position == 'all' {
    border: 0;
    &:before {
      display: none !important;
    }
  }
}
